"use server";

import {CheckoutFormValues} from "@/constants";
import {prisma} from "@/prisma/prisma-client";
import {OrderStatus, Prisma} from "@prisma/client";
import {cookies} from "next/headers";
import {sendEmail} from "@/lib";
import {PayOrder, VerificationUser} from "@/components/shared";
import {createPayment} from "@/lib";
import {getUserSession} from "@/lib/get-user-session";
import {hashSync} from "bcrypt";

export async function createOrder(data: CheckoutFormValues) {
    try {
        const cookieStore = await cookies();
        const cartToken = cookieStore.get('cartToken')?.value;

        if (!cartToken) throw new Error('Cart token not found');

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É
        const userCart = await prisma.cart.findFirst({
            include: {
                user: true,
                items: {
                    include: {
                        ingredients: true,
                        productItem: {
                            include: {
                                product: true,
                            },
                        },
                    },
                },
            },
            where: {token: cartToken},
        });

        if (!userCart) throw new Error('Cart not found');
        if (userCart.totalAmount === 0) throw new Error('Cart is empty');

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const order = await prisma.order.create({
            data: {
                token: cartToken,
                fullName: data.firstName + ' ' + data.lastName,
                email: data.email,
                phone: data.phone,
                address: data.address,
                comment: data.comment,
                totalAmount: userCart.totalAmount,
                status: OrderStatus.PENDING,
                items: JSON.stringify(userCart.items),
            },
        });

        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await prisma.cart.update({
            where: {id: userCart.id},
            data: {totalAmount: 0},
        });
        await prisma.cartItem.deleteMany({
            where: {cartId: userCart.id},
        });

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LiqPay
        const paymentData = await createPayment({
            amount: order.totalAmount,
            orderId: order.id,
            description: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id,
        });

        if (!paymentData) throw new Error('Payment data not found');

        const paymentUrl = paymentData.paymentUrl

        const template = await PayOrder({
            orderId: order.id,
            totalAmount: order.totalAmount,
            paymentUrl,
        });
        await sendEmail(
            data.email,
            'Next Pizza / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #' + order.id,
            template
        );

        return paymentUrl;
    } catch (err) {
        console.error('[CreateOrder] Server error', err);
        throw err;
    }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = await getUserSession();

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (!currentUser) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–∑ —Å–µ—Å—Å–∏–∏
        const findUser = await prisma.user.findFirst({
            where: { id: Number(currentUser.id) }
        });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (!findUser) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        await prisma.user.update({
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id, –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –∏–∑ —Å–µ—Å—Å–∏–∏
            where: { id: findUser.id },
            data: {
                fullName: body.fullName,
                email: body.email,
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–π
                password: body.password ? hashSync(body.password as string, 10) : findUser.password
            }
        });
    } catch (err) {
        console.log('Error [UPDATE_USER]', err);
        throw err;
    }
}

export async function registerUser(body: Prisma.UserCreateInput) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º email
        const user = await prisma.user.findFirst({
            where: { email: body.email },
        });

        if (user) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if (!user.verified) {
                throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
            }
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        const createdUser = await prisma.user.create({
            data: {
                fullName: body.fullName,
                email: body.email,
                password: hashSync(body.password, 10)
            },
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const code = Math.floor(100000 + Math.random() * 900000).toString();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ, —Å–≤—è–∑—ã–≤–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await prisma.verificationCode.create({
            data: {
                code,
                userId: createdUser.id,
            },
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const template = await VerificationUser({ code });
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await sendEmail(
            createdUser.email,
            'Next Pizza / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
            template
        );
    } catch (err) {
        console.log('Error [CREATE_USER]', err);
        throw err;
    }
}